import groovy.json.JsonOutput
pipeline {
  agent any
 
  parameters {
    choice(
        name: 'SERVER', 
        description: 'Servidor donde ejecutar el proceso',
        choices: ["TODOS", "SERVIDOR 1", "SERVIDOR 2", "SERVIDOR 3"]
       )
  } 
  stages {
    stage('Execute task in bd') {
      steps {
        script {
           def executors = [:]
           servers = readJSON file: "servers.json"
           fileContents = readFile file: "restore_db.sh"
           def slackURL = 'https://hooks.slack.com/services/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'
           def payload = JsonOutput.toJson([text : "Esto es un ejemplo desde jenkinsfile, usando webhookbot",
                                     channel   : "#drupal",
                                     username  : "jenkins",
                                     icon_emoji: ":jenkins:"])
          sh "curl -X POST --data-urlencode \'payload=${payload}\' ${slackURL}"
           
           servers['SERVERS'].each {
              server ->  
              if (params.SERVER == 'TODOS' || params.SERVER == server) {
                    executors[server] = {
                            node {
                              def remote = [:]
                              remote.name = servers[server]['name']
                              remote.host = servers[server]['host']
                              remote.user = servers[server]['user']
                              remote.password = servers[server]['password']
                              remote.allowAnyHosts = true
                              stage('Remote SSH') {
                                sshCommand remote: remote, command: fileContents
                              }
                            }
                    }
              }
              }
              parallel executors
        }
      }
    }
  }
}
